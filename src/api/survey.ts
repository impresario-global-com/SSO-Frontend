/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Cause I API
 * Cause I API Documentation
 * OpenAPI spec version: 1.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useCustomInstance } from './survey.axios'
import type { ErrorType } from './survey.axios'
export interface FeedbackReportDto {
  comment: string
  createdAt: string
  email: string
  id: number
  name: string
  rating: number
}

export interface CreateFeedbackDto {
  comment?: string
  rating: number
}

export interface FeedbackDto {
  comment: string
  createdAt: string
  rating: number
  surveyId: number
  userId: number
}

export interface CreateResponseDto {
  optionId: number
  questionId: number
  saqResponse: string
}

export interface ResponseDto {
  createdAt: string
  optionId: number
  questionId: number
  respondentId: number
  saqResponse: string
  scoreCalculated: boolean
  surveyId: number
  updatedAt: string
}

export type QuestionDtoType = (typeof QuestionDtoType)[keyof typeof QuestionDtoType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionDtoType = {
  quant: 'quant',
  mcq: 'mcq',
  saq: 'saq',
} as const

export type QuestionDtoStatus = (typeof QuestionDtoStatus)[keyof typeof QuestionDtoStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuestionDtoStatus = {
  draft: 'draft',
  published: 'published',
} as const

export interface OptionDto {
  createdAt: string
  description: string
  id: number
  questionId: number
  updatedAt: string
}

export interface QuestionDto {
  createdAt: string
  id: number
  imageCaption: string
  imageUrl: string
  karmaAttribute: string
  options: OptionDto[]
  situation: string
  status: QuestionDtoStatus
  surveyId: number
  title: string
  type: QuestionDtoType
  updatedAt: string
}

export type SurveyDtoStatus = (typeof SurveyDtoStatus)[keyof typeof SurveyDtoStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyDtoStatus = {
  draft: 'draft',
  published: 'published',
} as const

export interface SurveyDto {
  createdAt: string
  description: string
  id: number
  status: SurveyDtoStatus
  title: string
  updatedAt: string
}

export interface PaymentDto {
  /** Payment Amount */
  amount: string
  /** Bank Reference Number */
  bank_ref_num: string
  /** Email Address */
  email: string
  /** First Name */
  firstname: string
  /** Payment Hash */
  hash: string
  /** PayU Payment ID */
  mihpayid: string
  /** Payment Mode */
  mode: string
  /** Phone Number */
  phone: string
  /** Product Information */
  productinfo: string
  /** Payment Status */
  status: string
  /** Transaction ID */
  txnid: string
}

export interface CreatePaymentDto {
  /** Payment Amount */
  amount: string
  /** Bank Reference Number */
  bank_ref_num: string
  /** Email Address */
  email: string
  /** First Name */
  firstname: string
  /** Payment Hash */
  hash: string
  /** PayU Payment ID */
  mihpayid: string
  /** Payment Mode */
  mode: string
  /** Phone Number */
  phone: string
  /** Product Information */
  productinfo: string
  /** Payment Status */
  status: string
  /** Transaction ID */
  txnid: string
}

export interface UpdateFasfacUserPrefsDto {
  /** Age of the user */
  age?: number
  /** Amount pledged by the user */
  amountPledged?: number
  /** Full name of the user */
  fullName?: string
  /** Gender of the user */
  gender?: string
  /** Nationality of the user */
  nationality?: string
  /** Payment ID for the transaction */
  paymentId?: string
  /** Phone number of the user */
  phoneNumber?: string
  /** Profession of the user */
  profession?: string
}

export interface FasfacUserPrefsDto {
  /** Age of the user */
  age?: number
  /** Amount pledged by the user */
  amountPledged?: number
  /** ID of the cause */
  causeId: number
  /** Created Time */
  createdAt: string
  /** Full name of the user */
  fullName?: string
  /** Gender of the user */
  gender?: string
  /** Nationality of the user */
  nationality?: string
  /** Payment ID for the transaction */
  paymentId?: string
  /** Phone number of the user */
  phoneNumber?: string
  /** Profession of the user */
  profession?: string
  /** Last Updated Time */
  updatedAt: string
  /** ID of the user */
  userId: number
}

export interface CreateFasfacUserPrefsDto {
  /** ID of the cause */
  causeId: number
  /** ID of the user */
  userId: number
}

export interface DeleteFasfacCauseDto {
  /** Cause with id id deleted */
  message: string
}

export interface UpdateFasfacCauseDto {
  /** Colour In #FFFFFF */
  colour: string
  /** Description of the cause */
  description: string
  /** Description of the cause in Hindi */
  descriptionHindi: string
  /** Image URl */
  imageUrl: string
  /** Name of the cause */
  name: string
  /** Name of the cause in Hindi */
  nameHindi: string
}

export interface FasfacCauseDto {
  /** Colour In #FFFFFF */
  colour: string
  /** Timestamp when the cause was created */
  createdAt: string
  /** Description of the cause */
  description: string
  /** Description of the cause in Hindi */
  descriptionHindi: string
  /** Unique identifier of the cause */
  id: number
  /** Image URL */
  imageUrl: string
  /** Name of the cause */
  name: string
  /** Name of the cause in Hindi */
  nameHindi: string
  /** Timestamp when the cause was last updated */
  updatedAt: string
}

export interface CreateFasfacCauseDto {
  createdAt: string
  /** Description of the cause */
  description: string
  /** Description of the cause in Hindi */
  descriptionHindi: string
  /** Name of the cause */
  name: string
  /** Name of the cause in Hindi */
  nameHindi: string
  updatedAt: string
}

export interface UpdateScaleDto {
  currentQuestionId: number
}

export interface AdviceDto {
  content: string
  imgUrl: string
  section: string
}

export interface CharacteristicDto {
  description: string
  imgUrl: string
  trait: string
}

export interface ScaleDto {
  altruism: number
  authenticity: number
  completed: boolean
  createdAt: string
  currentQuestionId: number
  kindness: number
  mindfulness: number
  resultEmailSent: boolean
  righteousness: number
  updatedAt: string
  userId: number
}

export interface CauseLevelDto {
  advices: AdviceDto[]
  characteristics: CharacteristicDto[]
  description: string
  highestAttribute: string
  imgUrl: string
  lowestAttribute: string
  meanScore: number
  name: string
  scale: ScaleDto
  totalScore: number
}

export const useAppControllerGetKarmaScaleHook = () => {
  const appControllerGetKarmaScale = useCustomInstance<ScaleDto>()

  return (signal?: AbortSignal) => {
    return appControllerGetKarmaScale({ url: `/v1/scale`, method: 'GET', signal })
  }
}

export const getAppControllerGetKarmaScaleQueryKey = () => {
  return [`/v1/scale`] as const
}

export const useAppControllerGetKarmaScaleQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetKarmaScaleQueryKey()

  const appControllerGetKarmaScale = useAppControllerGetKarmaScaleHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>
  > = ({ signal }) => appControllerGetKarmaScale(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AppControllerGetKarmaScaleQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>
>
export type AppControllerGetKarmaScaleQueryError = ErrorType<unknown>

export const useAppControllerGetKarmaScale = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetKarmaScaleHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAppControllerGetKarmaScaleQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useAppControllerUpdateScaleCurrentQuestionIdHook = () => {
  const appControllerUpdateScaleCurrentQuestionId = useCustomInstance<UpdateScaleDto>()

  return (updateScaleDto: UpdateScaleDto) => {
    return appControllerUpdateScaleCurrentQuestionId({
      url: `/v1/scale`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateScaleDto,
    })
  }
}

export const useAppControllerUpdateScaleCurrentQuestionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
    TError,
    { data: UpdateScaleDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
  TError,
  { data: UpdateScaleDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerUpdateScaleCurrentQuestionId =
    useAppControllerUpdateScaleCurrentQuestionIdHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
    { data: UpdateScaleDto }
  > = (props) => {
    const { data } = props ?? {}

    return appControllerUpdateScaleCurrentQuestionId(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerUpdateScaleCurrentQuestionIdMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>
>
export type AppControllerUpdateScaleCurrentQuestionIdMutationBody = UpdateScaleDto
export type AppControllerUpdateScaleCurrentQuestionIdMutationError = ErrorType<unknown>

export const useAppControllerUpdateScaleCurrentQuestionId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerUpdateScaleCurrentQuestionIdHook>>>,
    TError,
    { data: UpdateScaleDto },
    TContext
  >
}) => {
  const mutationOptions = useAppControllerUpdateScaleCurrentQuestionIdMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useAppControllerGetCauseLevelHook = () => {
  const appControllerGetCauseLevel = useCustomInstance<CauseLevelDto>()

  return (signal?: AbortSignal) => {
    return appControllerGetCauseLevel({ url: `/v1/cause-level`, method: 'GET', signal })
  }
}

export const getAppControllerGetCauseLevelQueryKey = () => {
  return [`/v1/cause-level`] as const
}

export const useAppControllerGetCauseLevelQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetCauseLevelQueryKey()

  const appControllerGetCauseLevel = useAppControllerGetCauseLevelHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>
  > = ({ signal }) => appControllerGetCauseLevel(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AppControllerGetCauseLevelQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>
>
export type AppControllerGetCauseLevelQueryError = ErrorType<unknown>

export const useAppControllerGetCauseLevel = <
  TData = Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAppControllerGetCauseLevelHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAppControllerGetCauseLevelQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useAppControllerSendResultEmailHook = () => {
  const appControllerSendResultEmail = useCustomInstance<ScaleDto>()

  return () => {
    return appControllerSendResultEmail({ url: `/v1/send-result-email`, method: 'POST' })
  }
}

export const useAppControllerSendResultEmailMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const appControllerSendResultEmail = useAppControllerSendResultEmailHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
    void
  > = () => {
    return appControllerSendResultEmail()
  }

  return { mutationFn, ...mutationOptions }
}

export type AppControllerSendResultEmailMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>
>

export type AppControllerSendResultEmailMutationError = ErrorType<unknown>

export const useAppControllerSendResultEmail = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useAppControllerSendResultEmailHook>>>,
    TError,
    void,
    TContext
  >
}) => {
  const mutationOptions = useAppControllerSendResultEmailMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useFasfacCauseControllerCreateCauseHook = () => {
  const fasfacCauseControllerCreateCause = useCustomInstance<FasfacCauseDto>()

  return (createFasfacCauseDto: CreateFasfacCauseDto) => {
    return fasfacCauseControllerCreateCause({
      url: `/v1/cause`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createFasfacCauseDto,
    })
  }
}

export const useFasfacCauseControllerCreateCauseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerCreateCauseHook>>>,
    TError,
    { data: CreateFasfacCauseDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerCreateCauseHook>>>,
  TError,
  { data: CreateFasfacCauseDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const fasfacCauseControllerCreateCause = useFasfacCauseControllerCreateCauseHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerCreateCauseHook>>>,
    { data: CreateFasfacCauseDto }
  > = (props) => {
    const { data } = props ?? {}

    return fasfacCauseControllerCreateCause(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type FasfacCauseControllerCreateCauseMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerCreateCauseHook>>>
>
export type FasfacCauseControllerCreateCauseMutationBody = CreateFasfacCauseDto
export type FasfacCauseControllerCreateCauseMutationError = ErrorType<unknown>

export const useFasfacCauseControllerCreateCause = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerCreateCauseHook>>>,
    TError,
    { data: CreateFasfacCauseDto },
    TContext
  >
}) => {
  const mutationOptions = useFasfacCauseControllerCreateCauseMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useFasfacCauseControllerFindAllHook = () => {
  const fasfacCauseControllerFindAll = useCustomInstance<FasfacCauseDto>()

  return (signal?: AbortSignal) => {
    return fasfacCauseControllerFindAll({ url: `/v1/cause`, method: 'GET', signal })
  }
}

export const getFasfacCauseControllerFindAllQueryKey = () => {
  return [`/v1/cause`] as const
}

export const useFasfacCauseControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindAllHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFasfacCauseControllerFindAllQueryKey()

  const fasfacCauseControllerFindAll = useFasfacCauseControllerFindAllHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindAllHook>>>
  > = ({ signal }) => fasfacCauseControllerFindAll(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindAllHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type FasfacCauseControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindAllHook>>>
>
export type FasfacCauseControllerFindAllQueryError = ErrorType<unknown>

export const useFasfacCauseControllerFindAll = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindAllHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useFasfacCauseControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useFasfacCauseControllerFindOneHook = () => {
  const fasfacCauseControllerFindOne = useCustomInstance<FasfacCauseDto>()

  return (id: number, signal?: AbortSignal) => {
    return fasfacCauseControllerFindOne({ url: `/v1/cause/${id}`, method: 'GET', signal })
  }
}

export const getFasfacCauseControllerFindOneQueryKey = (id: number) => {
  return [`/v1/cause/${id}`] as const
}

export const useFasfacCauseControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindOneHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindOneHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFasfacCauseControllerFindOneQueryKey(id)

  const fasfacCauseControllerFindOne = useFasfacCauseControllerFindOneHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindOneHook>>>
  > = ({ signal }) => fasfacCauseControllerFindOne(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindOneHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type FasfacCauseControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindOneHook>>>
>
export type FasfacCauseControllerFindOneQueryError = ErrorType<unknown>

export const useFasfacCauseControllerFindOne = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindOneHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerFindOneHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useFasfacCauseControllerFindOneQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useFasfacCauseControllerUpdateHook = () => {
  const fasfacCauseControllerUpdate = useCustomInstance<FasfacCauseDto>()

  return (id: number, updateFasfacCauseDto: UpdateFasfacCauseDto) => {
    return fasfacCauseControllerUpdate({
      url: `/v1/cause/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateFasfacCauseDto,
    })
  }
}

export const useFasfacCauseControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerUpdateHook>>>,
    TError,
    { id: number; data: UpdateFasfacCauseDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerUpdateHook>>>,
  TError,
  { id: number; data: UpdateFasfacCauseDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const fasfacCauseControllerUpdate = useFasfacCauseControllerUpdateHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerUpdateHook>>>,
    { id: number; data: UpdateFasfacCauseDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return fasfacCauseControllerUpdate(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type FasfacCauseControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerUpdateHook>>>
>
export type FasfacCauseControllerUpdateMutationBody = UpdateFasfacCauseDto
export type FasfacCauseControllerUpdateMutationError = ErrorType<unknown>

export const useFasfacCauseControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerUpdateHook>>>,
    TError,
    { id: number; data: UpdateFasfacCauseDto },
    TContext
  >
}) => {
  const mutationOptions = useFasfacCauseControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useFasfacCauseControllerDeleteHook = () => {
  const fasfacCauseControllerDelete = useCustomInstance<DeleteFasfacCauseDto>()

  return (id: number) => {
    return fasfacCauseControllerDelete({ url: `/v1/cause/${id}`, method: 'DELETE' })
  }
}

export const useFasfacCauseControllerDeleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerDeleteHook>>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerDeleteHook>>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const fasfacCauseControllerDelete = useFasfacCauseControllerDeleteHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerDeleteHook>>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return fasfacCauseControllerDelete(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type FasfacCauseControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerDeleteHook>>>
>

export type FasfacCauseControllerDeleteMutationError = ErrorType<unknown>

export const useFasfacCauseControllerDelete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacCauseControllerDeleteHook>>>,
    TError,
    { id: number },
    TContext
  >
}) => {
  const mutationOptions = useFasfacCauseControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Create a new user preference
 */
export const useFasfacUserPrefsControllerCreateHook = () => {
  const fasfacUserPrefsControllerCreate = useCustomInstance<CreateFasfacUserPrefsDto>()

  return (createFasfacUserPrefsDto: CreateFasfacUserPrefsDto) => {
    return fasfacUserPrefsControllerCreate({
      url: `/v1/cause-user-prefs`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createFasfacUserPrefsDto,
    })
  }
}

export const useFasfacUserPrefsControllerCreateMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerCreateHook>>>,
    TError,
    { data: CreateFasfacUserPrefsDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerCreateHook>>>,
  TError,
  { data: CreateFasfacUserPrefsDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const fasfacUserPrefsControllerCreate = useFasfacUserPrefsControllerCreateHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerCreateHook>>>,
    { data: CreateFasfacUserPrefsDto }
  > = (props) => {
    const { data } = props ?? {}

    return fasfacUserPrefsControllerCreate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type FasfacUserPrefsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerCreateHook>>>
>
export type FasfacUserPrefsControllerCreateMutationBody = CreateFasfacUserPrefsDto
export type FasfacUserPrefsControllerCreateMutationError = ErrorType<void>

/**
 * @summary Create a new user preference
 */
export const useFasfacUserPrefsControllerCreate = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerCreateHook>>>,
    TError,
    { data: CreateFasfacUserPrefsDto },
    TContext
  >
}) => {
  const mutationOptions = useFasfacUserPrefsControllerCreateMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get all user preferences
 */
export const useFasfacUserPrefsControllerFindAllHook = () => {
  const fasfacUserPrefsControllerFindAll = useCustomInstance<FasfacUserPrefsDto>()

  return (signal?: AbortSignal) => {
    return fasfacUserPrefsControllerFindAll({ url: `/v1/cause-user-prefs`, method: 'GET', signal })
  }
}

export const getFasfacUserPrefsControllerFindAllQueryKey = () => {
  return [`/v1/cause-user-prefs`] as const
}

export const useFasfacUserPrefsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindAllHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFasfacUserPrefsControllerFindAllQueryKey()

  const fasfacUserPrefsControllerFindAll = useFasfacUserPrefsControllerFindAllHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindAllHook>>>
  > = ({ signal }) => fasfacUserPrefsControllerFindAll(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindAllHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type FasfacUserPrefsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindAllHook>>>
>
export type FasfacUserPrefsControllerFindAllQueryError = ErrorType<unknown>

/**
 * @summary Get all user preferences
 */
export const useFasfacUserPrefsControllerFindAll = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindAllHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useFasfacUserPrefsControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get a specific user preference by ID
 */
export const useFasfacUserPrefsControllerFindOneHook = () => {
  const fasfacUserPrefsControllerFindOne = useCustomInstance<FasfacUserPrefsDto>()

  return (id: number, signal?: AbortSignal) => {
    return fasfacUserPrefsControllerFindOne({
      url: `/v1/cause-user-prefs/${id}`,
      method: 'GET',
      signal,
    })
  }
}

export const getFasfacUserPrefsControllerFindOneQueryKey = (id: number) => {
  return [`/v1/cause-user-prefs/${id}`] as const
}

export const useFasfacUserPrefsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindOneHook>>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindOneHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFasfacUserPrefsControllerFindOneQueryKey(id)

  const fasfacUserPrefsControllerFindOne = useFasfacUserPrefsControllerFindOneHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindOneHook>>>
  > = ({ signal }) => fasfacUserPrefsControllerFindOne(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindOneHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type FasfacUserPrefsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindOneHook>>>
>
export type FasfacUserPrefsControllerFindOneQueryError = ErrorType<void>

/**
 * @summary Get a specific user preference by ID
 */
export const useFasfacUserPrefsControllerFindOne = <
  TData = Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindOneHook>>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerFindOneHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useFasfacUserPrefsControllerFindOneQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Update a user preference by ID
 */
export const useFasfacUserPrefsControllerUpdateHook = () => {
  const fasfacUserPrefsControllerUpdate = useCustomInstance<FasfacUserPrefsDto>()

  return (id: number, updateFasfacUserPrefsDto: UpdateFasfacUserPrefsDto) => {
    return fasfacUserPrefsControllerUpdate({
      url: `/v1/cause-user-prefs/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateFasfacUserPrefsDto,
    })
  }
}

export const useFasfacUserPrefsControllerUpdateMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerUpdateHook>>>,
    TError,
    { id: number; data: UpdateFasfacUserPrefsDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerUpdateHook>>>,
  TError,
  { id: number; data: UpdateFasfacUserPrefsDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const fasfacUserPrefsControllerUpdate = useFasfacUserPrefsControllerUpdateHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerUpdateHook>>>,
    { id: number; data: UpdateFasfacUserPrefsDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return fasfacUserPrefsControllerUpdate(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type FasfacUserPrefsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerUpdateHook>>>
>
export type FasfacUserPrefsControllerUpdateMutationBody = UpdateFasfacUserPrefsDto
export type FasfacUserPrefsControllerUpdateMutationError = ErrorType<void>

/**
 * @summary Update a user preference by ID
 */
export const useFasfacUserPrefsControllerUpdate = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useFasfacUserPrefsControllerUpdateHook>>>,
    TError,
    { id: number; data: UpdateFasfacUserPrefsDto },
    TContext
  >
}) => {
  const mutationOptions = useFasfacUserPrefsControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions)
}

export const usePaymentControllerCreatePaymentHook = () => {
  const paymentControllerCreatePayment = useCustomInstance<CreatePaymentDto>()

  return (createPaymentDto: CreatePaymentDto) => {
    return paymentControllerCreatePayment({
      url: `/v1/payments`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPaymentDto,
    })
  }
}

export const usePaymentControllerCreatePaymentMutationOptions = <
  TError = ErrorType<CreatePaymentDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePaymentControllerCreatePaymentHook>>>,
    TError,
    { data: CreatePaymentDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePaymentControllerCreatePaymentHook>>>,
  TError,
  { data: CreatePaymentDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const paymentControllerCreatePayment = usePaymentControllerCreatePaymentHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePaymentControllerCreatePaymentHook>>>,
    { data: CreatePaymentDto }
  > = (props) => {
    const { data } = props ?? {}

    return paymentControllerCreatePayment(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PaymentControllerCreatePaymentMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePaymentControllerCreatePaymentHook>>>
>
export type PaymentControllerCreatePaymentMutationBody = CreatePaymentDto
export type PaymentControllerCreatePaymentMutationError = ErrorType<CreatePaymentDto>

export const usePaymentControllerCreatePayment = <
  TError = ErrorType<CreatePaymentDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePaymentControllerCreatePaymentHook>>>,
    TError,
    { data: CreatePaymentDto },
    TContext
  >
}) => {
  const mutationOptions = usePaymentControllerCreatePaymentMutationOptions(options)

  return useMutation(mutationOptions)
}

export const usePaymentControllerGetAllPaymentsHook = () => {
  const paymentControllerGetAllPayments = useCustomInstance<PaymentDto>()

  return (signal?: AbortSignal) => {
    return paymentControllerGetAllPayments({ url: `/v1/payments`, method: 'GET', signal })
  }
}

export const getPaymentControllerGetAllPaymentsQueryKey = () => {
  return [`/v1/payments`] as const
}

export const usePaymentControllerGetAllPaymentsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetAllPaymentsHook>>>,
  TError = ErrorType<PaymentDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetAllPaymentsHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPaymentControllerGetAllPaymentsQueryKey()

  const paymentControllerGetAllPayments = usePaymentControllerGetAllPaymentsHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetAllPaymentsHook>>>
  > = ({ signal }) => paymentControllerGetAllPayments(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetAllPaymentsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type PaymentControllerGetAllPaymentsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetAllPaymentsHook>>>
>
export type PaymentControllerGetAllPaymentsQueryError = ErrorType<PaymentDto>

export const usePaymentControllerGetAllPayments = <
  TData = Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetAllPaymentsHook>>>,
  TError = ErrorType<PaymentDto>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetAllPaymentsHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = usePaymentControllerGetAllPaymentsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const usePaymentControllerGetPaymentByTxnIdHook = () => {
  const paymentControllerGetPaymentByTxnId = useCustomInstance<PaymentDto>()

  return (txnid: string, signal?: AbortSignal) => {
    return paymentControllerGetPaymentByTxnId({
      url: `/v1/payments/${txnid}`,
      method: 'GET',
      signal,
    })
  }
}

export const getPaymentControllerGetPaymentByTxnIdQueryKey = (txnid: string) => {
  return [`/v1/payments/${txnid}`] as const
}

export const usePaymentControllerGetPaymentByTxnIdQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetPaymentByTxnIdHook>>>,
  TError = ErrorType<PaymentDto>,
>(
  txnid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetPaymentByTxnIdHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPaymentControllerGetPaymentByTxnIdQueryKey(txnid)

  const paymentControllerGetPaymentByTxnId = usePaymentControllerGetPaymentByTxnIdHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetPaymentByTxnIdHook>>>
  > = ({ signal }) => paymentControllerGetPaymentByTxnId(txnid, signal)

  return { queryKey, queryFn, enabled: !!txnid, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetPaymentByTxnIdHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type PaymentControllerGetPaymentByTxnIdQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetPaymentByTxnIdHook>>>
>
export type PaymentControllerGetPaymentByTxnIdQueryError = ErrorType<PaymentDto>

export const usePaymentControllerGetPaymentByTxnId = <
  TData = Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetPaymentByTxnIdHook>>>,
  TError = ErrorType<PaymentDto>,
>(
  txnid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof usePaymentControllerGetPaymentByTxnIdHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = usePaymentControllerGetPaymentByTxnIdQueryOptions(txnid, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerGetAllHook = () => {
  const surveyControllerGetAll = useCustomInstance<SurveyDto[]>()

  return (signal?: AbortSignal) => {
    return surveyControllerGetAll({ url: `/v1/surveys`, method: 'GET', signal })
  }
}

export const getSurveyControllerGetAllQueryKey = () => {
  return [`/v1/surveys`] as const
}

export const useSurveyControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetAllQueryKey()

  const surveyControllerGetAll = useSurveyControllerGetAllHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>
  > = ({ signal }) => surveyControllerGetAll(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetAllQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>
>
export type SurveyControllerGetAllQueryError = ErrorType<unknown>

export const useSurveyControllerGetAll = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetAllHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerGetOneHook = () => {
  const surveyControllerGetOne = useCustomInstance<SurveyDto>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetOne({ url: `/v1/surveys/${id}`, method: 'GET', signal })
  }
}

export const getSurveyControllerGetOneQueryKey = (id: number) => {
  return [`/v1/surveys/${id}`] as const
}

export const useSurveyControllerGetOneQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetOneQueryKey(id)

  const surveyControllerGetOne = useSurveyControllerGetOneHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>
  > = ({ signal }) => surveyControllerGetOne(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetOneQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>
>
export type SurveyControllerGetOneQueryError = ErrorType<unknown>

export const useSurveyControllerGetOne = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetOneHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetOneQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerGetQuestionsHook = () => {
  const surveyControllerGetQuestions = useCustomInstance<QuestionDto[]>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetQuestions({
      url: `/v1/surveys/${id}/questions`,
      method: 'GET',
      signal,
    })
  }
}

export const getSurveyControllerGetQuestionsQueryKey = (id: number) => {
  return [`/v1/surveys/${id}/questions`] as const
}

export const useSurveyControllerGetQuestionsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetQuestionsQueryKey(id)

  const surveyControllerGetQuestions = useSurveyControllerGetQuestionsHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>
  > = ({ signal }) => surveyControllerGetQuestions(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetQuestionsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>
>
export type SurveyControllerGetQuestionsQueryError = ErrorType<unknown>

export const useSurveyControllerGetQuestions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetQuestionsHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetQuestionsQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerGetSurveyResponseHook = () => {
  const surveyControllerGetSurveyResponse = useCustomInstance<ResponseDto[]>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetSurveyResponse({
      url: `/v1/surveys/${id}/responses`,
      method: 'GET',
      signal,
    })
  }
}

export const getSurveyControllerGetSurveyResponseQueryKey = (id: number) => {
  return [`/v1/surveys/${id}/responses`] as const
}

export const useSurveyControllerGetSurveyResponseQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetSurveyResponseQueryKey(id)

  const surveyControllerGetSurveyResponse = useSurveyControllerGetSurveyResponseHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>
  > = ({ signal }) => surveyControllerGetSurveyResponse(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetSurveyResponseQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>
>
export type SurveyControllerGetSurveyResponseQueryError = ErrorType<unknown>

export const useSurveyControllerGetSurveyResponse = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetSurveyResponseHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetSurveyResponseQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerCreateResponseHook = () => {
  const surveyControllerCreateResponse = useCustomInstance<ResponseDto>()

  return (id: number, createResponseDto: CreateResponseDto) => {
    return surveyControllerCreateResponse({
      url: `/v1/surveys/${id}/response`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createResponseDto,
    })
  }
}

export const useSurveyControllerCreateResponseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
    TError,
    { id: number; data: CreateResponseDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
  TError,
  { id: number; data: CreateResponseDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const surveyControllerCreateResponse = useSurveyControllerCreateResponseHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
    { id: number; data: CreateResponseDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return surveyControllerCreateResponse(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type SurveyControllerCreateResponseMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>
>
export type SurveyControllerCreateResponseMutationBody = CreateResponseDto
export type SurveyControllerCreateResponseMutationError = ErrorType<unknown>

export const useSurveyControllerCreateResponse = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateResponseHook>>>,
    TError,
    { id: number; data: CreateResponseDto },
    TContext
  >
}) => {
  const mutationOptions = useSurveyControllerCreateResponseMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useSurveyControllerGetFeedbackHook = () => {
  const surveyControllerGetFeedback = useCustomInstance<FeedbackDto>()

  return (id: number, signal?: AbortSignal) => {
    return surveyControllerGetFeedback({ url: `/v1/surveys/${id}/feedback`, method: 'GET', signal })
  }
}

export const getSurveyControllerGetFeedbackQueryKey = (id: number) => {
  return [`/v1/surveys/${id}/feedback`] as const
}

export const useSurveyControllerGetFeedbackQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
        TError,
        TData
      >
    >
  }
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSurveyControllerGetFeedbackQueryKey(id)

  const surveyControllerGetFeedback = useSurveyControllerGetFeedbackHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>
  > = ({ signal }) => surveyControllerGetFeedback(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type SurveyControllerGetFeedbackQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>
>
export type SurveyControllerGetFeedbackQueryError = ErrorType<unknown>

export const useSurveyControllerGetFeedback = <
  TData = Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useSurveyControllerGetFeedbackHook>>>,
        TError,
        TData
      >
    >
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useSurveyControllerGetFeedbackQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSurveyControllerCreateFeedbackHook = () => {
  const surveyControllerCreateFeedback = useCustomInstance<FeedbackDto>()

  return (id: number, createFeedbackDto: CreateFeedbackDto) => {
    return surveyControllerCreateFeedback({
      url: `/v1/surveys/${id}/feedback`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createFeedbackDto,
    })
  }
}

export const useSurveyControllerCreateFeedbackMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
    TError,
    { id: number; data: CreateFeedbackDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
  TError,
  { id: number; data: CreateFeedbackDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const surveyControllerCreateFeedback = useSurveyControllerCreateFeedbackHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
    { id: number; data: CreateFeedbackDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return surveyControllerCreateFeedback(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type SurveyControllerCreateFeedbackMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>
>
export type SurveyControllerCreateFeedbackMutationBody = CreateFeedbackDto
export type SurveyControllerCreateFeedbackMutationError = ErrorType<unknown>

export const useSurveyControllerCreateFeedback = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerCreateFeedbackHook>>>,
    TError,
    { id: number; data: CreateFeedbackDto },
    TContext
  >
}) => {
  const mutationOptions = useSurveyControllerCreateFeedbackMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useSurveyControllerMarkAsCompleteHook = () => {
  const surveyControllerMarkAsComplete = useCustomInstance<ScaleDto>()

  return (id: number) => {
    return surveyControllerMarkAsComplete({
      url: `/v1/surveys/${id}/mark-as-complete`,
      method: 'POST',
    })
  }
}

export const useSurveyControllerMarkAsCompleteMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
    TError,
    { id: number },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const surveyControllerMarkAsComplete = useSurveyControllerMarkAsCompleteHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return surveyControllerMarkAsComplete(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type SurveyControllerMarkAsCompleteMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>
>

export type SurveyControllerMarkAsCompleteMutationError = ErrorType<unknown>

export const useSurveyControllerMarkAsComplete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSurveyControllerMarkAsCompleteHook>>>,
    TError,
    { id: number },
    TContext
  >
}) => {
  const mutationOptions = useSurveyControllerMarkAsCompleteMutationOptions(options)

  return useMutation(mutationOptions)
}

export const useAnalyticsControllerGetFeedbackReportHook = () => {
  const analyticsControllerGetFeedbackReport = useCustomInstance<FeedbackReportDto[]>()

  return (signal?: AbortSignal) => {
    return analyticsControllerGetFeedbackReport({ url: `/v1/analytics`, method: 'GET', signal })
  }
}

export const getAnalyticsControllerGetFeedbackReportQueryKey = () => {
  return [`/v1/analytics`] as const
}

export const useAnalyticsControllerGetFeedbackReportQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useAnalyticsControllerGetFeedbackReportHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAnalyticsControllerGetFeedbackReportHook>>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAnalyticsControllerGetFeedbackReportQueryKey()

  const analyticsControllerGetFeedbackReport = useAnalyticsControllerGetFeedbackReportHook()

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useAnalyticsControllerGetFeedbackReportHook>>>
  > = ({ signal }) => analyticsControllerGetFeedbackReport(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useAnalyticsControllerGetFeedbackReportHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type AnalyticsControllerGetFeedbackReportQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useAnalyticsControllerGetFeedbackReportHook>>>
>
export type AnalyticsControllerGetFeedbackReportQueryError = ErrorType<unknown>

export const useAnalyticsControllerGetFeedbackReport = <
  TData = Awaited<ReturnType<ReturnType<typeof useAnalyticsControllerGetFeedbackReportHook>>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useAnalyticsControllerGetFeedbackReportHook>>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useAnalyticsControllerGetFeedbackReportQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const useSeederControllerSeedHindiQuestionsAndOptionsHook = () => {
  const seederControllerSeedHindiQuestionsAndOptions = useCustomInstance<void>()

  return () => {
    return seederControllerSeedHindiQuestionsAndOptions({
      url: `/v1/seeders/seed-hindi-questions-answers`,
      method: 'POST',
    })
  }
}

export const useSeederControllerSeedHindiQuestionsAndOptionsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSeederControllerSeedHindiQuestionsAndOptionsHook>>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useSeederControllerSeedHindiQuestionsAndOptionsHook>>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const seederControllerSeedHindiQuestionsAndOptions =
    useSeederControllerSeedHindiQuestionsAndOptionsHook()

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useSeederControllerSeedHindiQuestionsAndOptionsHook>>>,
    void
  > = () => {
    return seederControllerSeedHindiQuestionsAndOptions()
  }

  return { mutationFn, ...mutationOptions }
}

export type SeederControllerSeedHindiQuestionsAndOptionsMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useSeederControllerSeedHindiQuestionsAndOptionsHook>>>
>

export type SeederControllerSeedHindiQuestionsAndOptionsMutationError = ErrorType<unknown>

export const useSeederControllerSeedHindiQuestionsAndOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useSeederControllerSeedHindiQuestionsAndOptionsHook>>>,
    TError,
    void,
    TContext
  >
}) => {
  const mutationOptions = useSeederControllerSeedHindiQuestionsAndOptionsMutationOptions(options)

  return useMutation(mutationOptions)
}
