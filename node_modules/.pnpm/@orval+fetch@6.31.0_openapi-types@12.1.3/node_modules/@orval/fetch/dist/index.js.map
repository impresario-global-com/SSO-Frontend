{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  camel,\n  ClientBuilder,\n  ClientDependenciesBuilder,\n  ClientGeneratorsBuilder,\n  generateFormDataAndUrlEncodedFunction,\n  generateVerbImports,\n  GeneratorDependency,\n  GeneratorOptions,\n  GeneratorVerbOptions,\n  GetterPropType,\n  stringify,\n  toObjectString,\n  generateBodyOptions,\n  isObject,\n} from '@orval/core';\n\nconst generateRequestFunction = (\n  {\n    queryParams,\n    operationName,\n    response,\n    mutator,\n    body,\n    props,\n    verb,\n    formData,\n    formUrlEncoded,\n    override,\n  }: GeneratorVerbOptions,\n  { route }: GeneratorOptions,\n) => {\n  const isRequestOptions = override?.requestOptions !== false;\n  const isFormData = override?.formData !== false;\n  const isFormUrlEncoded = override?.formUrlEncoded !== false;\n\n  const getUrlFnName = camel(`get-${operationName}-url`);\n  const getUrlFnProps = toObjectString(\n    props.filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS ||\n        prop.type === GetterPropType.QUERY_PARAM,\n    ),\n    'implementation',\n  );\n  const getUrlFnImplementation = `export const ${getUrlFnName} = (${getUrlFnProps}) => {\n${\n  queryParams\n    ? `\n  const normalizedParams = new URLSearchParams();\n\n  Object.entries(params || {}).forEach(([key, value]) => {\n    if (value === null) {\n      normalizedParams.append(key, 'null');\n    } else if (value !== undefined) {\n      normalizedParams.append(key, value.toString());\n    }\n  });`\n    : ''\n}\n\n  return \\`${route}${queryParams ? '?${normalizedParams.toString()}' : ''}\\`\n}\\n`;\n\n  const responseTypeName = `${operationName}Response`;\n  const responseTypeImplementation = `export type ${operationName}Response = {\n  data: ${response.definition.success || 'unknown'};\n  status: number;\n}`;\n\n  const getUrlFnProperties = props\n    .filter(\n      (prop) =>\n        prop.type === GetterPropType.PARAM ||\n        prop.type === GetterPropType.QUERY_PARAM ||\n        prop.type === GetterPropType.NAMED_PATH_PARAMS,\n    )\n    .map((param) => {\n      if (param.type === GetterPropType.NAMED_PATH_PARAMS) {\n        return param.destructured;\n      } else {\n        return param.name;\n      }\n    })\n    .join(',');\n\n  const args = `${toObjectString(props, 'implementation')} ${isRequestOptions ? `options?: RequestInit` : ''}`;\n  const retrunType = `Promise<${responseTypeName}>`;\n\n  const globalFetchOptions = isObject(override?.requestOptions)\n    ? `${stringify(override?.requestOptions)?.slice(1, -1)?.trim()}`\n    : '';\n  const fetchMethodOption = `method: '${verb.toUpperCase()}'`;\n\n  const requestBodyParams = generateBodyOptions(\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  );\n  const fetchBodyOption = requestBodyParams\n    ? `body: JSON.stringify(${requestBodyParams})`\n    : '';\n\n  const fetchFnOptions = `${getUrlFnName}(${getUrlFnProperties}),\n  {${globalFetchOptions ? '\\n' : ''}      ${globalFetchOptions}\n    ${isRequestOptions ? '...options,' : ''}\n    ${fetchMethodOption}${fetchBodyOption ? ',' : ''}\n    ${fetchBodyOption}\n  }\n`;\n  const fetchResponseImplementation = `const res = await fetch(${fetchFnOptions}\n  )\n  const data = await res.json()\n\n  return { status: res.status, data }\n`;\n  const customFetchResponseImplementation = `return ${mutator?.name}<${retrunType}>(${fetchFnOptions});`;\n\n  const bodyForm = generateFormDataAndUrlEncodedFunction({\n    formData,\n    formUrlEncoded,\n    body,\n    isFormData,\n    isFormUrlEncoded,\n  });\n\n  const fetchImplementationBody = mutator\n    ? customFetchResponseImplementation\n    : `${bodyForm ? `  ${bodyForm}\\n` : ''}` +\n      `  ${fetchResponseImplementation}`;\n  const fetchImplementation = `export const ${operationName} = async (${args}): ${retrunType} => {\\n${fetchImplementationBody}}`;\n\n  const implementation =\n    `${responseTypeImplementation}\\n\\n` +\n    `${getUrlFnImplementation}\\n` +\n    `${fetchImplementation}\\n`;\n\n  return implementation;\n};\n\nexport const generateClient: ClientBuilder = (verbOptions, options) => {\n  const imports = generateVerbImports(verbOptions);\n  const functionImplementation = generateRequestFunction(verbOptions, options);\n\n  return {\n    implementation: `${functionImplementation}\\n`,\n    imports,\n  };\n};\n\nconst fetchClientBuilder: ClientGeneratorsBuilder = {\n  client: generateClient,\n  dependencies: () => [],\n};\n\nexport const builder = () => () => fetchClientBuilder;\n\nexport default builder;\n"],"mappings":"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","names":[]}